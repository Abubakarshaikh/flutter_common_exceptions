library flutter_common_exceptions;

/// Base class for all all client-side errors that can be generated by the app
sealed class AppException implements Exception {
  AppException(this.code, this.message);
  final String code;
  final String message;

  @override
  String toString() => message;
}

/// Auth
class EmailAlreadyInUseException extends AppException {
  EmailAlreadyInUseException()
      : super('email-already-in-use', 'Email already in use');
}

class WeakPasswordException extends AppException {
  WeakPasswordException() : super('weak-password', 'Password is too weak');
}

class WrongPasswordException extends AppException {
  WrongPasswordException() : super('wrong-password', 'Wrong password');
}

class InvalidEmailException extends AppException {
  InvalidEmailException() : super('invalid-email', 'Invalid Email');
}

class UserNotFoundException extends AppException {
  UserNotFoundException() : super('user-not-found', 'User not found');
}

class InvalidOTPException extends AppException {
  InvalidOTPException() : super('invalid-otp', 'Invalid OTP');
}

class UserNotSignedInException extends AppException {
  UserNotSignedInException()
      : super(
          'user-not-signed-in',
          "The operation can't be completed (not signed in)",
        );
}

/// Cart
class CartSyncFailedException extends AppException {
  CartSyncFailedException()
      : super(
          'cart-sync-failed',
          'An error has occurred while updating the shopping cart',
        );
}

/// Checkout
class PaymentFailureEmptyCartException extends AppException {
  PaymentFailureEmptyCartException()
      : super(
          'payment-failure-empty-cart',
          "Can't place an order if the cart is empty",
        );
}

// Products
class NullProductImageUrlException extends AppException {
  NullProductImageUrlException()
      : super(
          'user-not-signed-in',
          "Can't upload a product with a null image",
        );
}

/// Orders
class ParseOrderFailureException extends AppException {
  ParseOrderFailureException(this.status)
      : super(
          'parse-order-failure',
          'Could not parse order status: $status',
        );
  final String status;
}

// Too many request Exception

//

class TooManyRequestsException extends AppException {
  TooManyRequestsException() : super('too-many-requests', 'Too Many Request');
}

// Network Request
// network-request-failed
class NetworkRequestFailedException extends AppException {
  NetworkRequestFailedException()
      : super('network-request-failed', 'Network Request Failed');
}

class OperationNotAllowedException extends AppException {
  OperationNotAllowedException()
      : super('operation-not-allowed', 'Operation Not Allowed');
}

class ExpiredActionCodeException extends AppException {
  ExpiredActionCodeException()
      : super('expired-action-code', 'Expired Action Code');
}

//
class InvalidActionCodeException extends AppException {
  InvalidActionCodeException()
      : super('invalid-action-code', 'Invalid Action Code');
}
